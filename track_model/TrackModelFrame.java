/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package track_model;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.*;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import track_model.tables.BlockTable;
import track_model.tables.CrossingTable;
import track_model.tables.StationTable;
import track_model.tables.SwitchTable;
import track_model.tables.TrackModelTableModel;

/**
 *
 * @author Gowest
 */
public class TrackModelFrame extends javax.swing.JFrame {

    private final DbHelper dbHelper = new DbHelper();

    /**
     * Creates new form TrackModelFrame
     */
    public TrackModelFrame() {
        initComponents();
        if (TrackModel.doTablesExist()) {
            populateTables();
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clearButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        murphButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        blockScrollPane = new javax.swing.JScrollPane();
        blockTable = new BlockTable();
        switchScrollPane = new javax.swing.JScrollPane();
        switchTable = new SwitchTable();
        crossingScrollPane = new javax.swing.JScrollPane();
        crossingTable = new CrossingTable();
        stationScrollPane = new javax.swing.JScrollPane();
        stationTable = new StationTable();
        occupancyCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Track Model");

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        murphButton.setText("Failure Tests");
        murphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                murphButtonActionPerformed(evt);
            }
        });

        blockScrollPane.setViewportView(blockTable);

        tabbedPane.addTab("Blocks", blockScrollPane);

        switchScrollPane.setViewportView(switchTable);

        tabbedPane.addTab("Switches", switchScrollPane);

        crossingScrollPane.setViewportView(crossingTable);

        tabbedPane.addTab("Crossings", crossingScrollPane);

        stationScrollPane.setViewportView(stationTable);

        tabbedPane.addTab("Stations", stationScrollPane);

        occupancyCheckBox.setText("Show Occupied Blocks Only");
        occupancyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                occupancyCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(murphButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(occupancyCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(importButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(importButton)
                    .addComponent(murphButton)
                    .addComponent(occupancyCheckBox))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        int response = JOptionPane.showConfirmDialog(null, "Clearing will wipe all existing track data. Continue?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            dbHelper.connect();
            dbHelper.execute("DROP TABLE IF EXISTS BLOCKS");
            dbHelper.execute("DROP TABLE IF EXISTS CONNECTIONS");
            dbHelper.execute("DROP TABLE IF EXISTS CROSSINGS");
            dbHelper.execute("DROP TABLE IF EXISTS STATIONS");
            dbHelper.close();

            ((DefaultTableModel) blockTable.getModel()).setRowCount(0);
            ((DefaultTableModel) switchTable.getModel()).setRowCount(0);
            ((DefaultTableModel) crossingTable.getModel()).setRowCount(0);
            ((DefaultTableModel) stationTable.getModel()).setRowCount(0);
        }
    }//GEN-LAST:event_clearButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed

        int response = JOptionPane.showConfirmDialog(null, "Importing new track will wipe all existing track data. Continue?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getDefaultDirectory());
            jfc.setFileFilter(new FileNameExtensionFilter("CSV Files (*.csv)", "csv"));
            int returnValue = jfc.showOpenDialog(null);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                initializeDatabase();
                populateDatabase(jfc.getSelectedFile());
                populateTables();
            }
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void murphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_murphButtonActionPerformed
        MurphFrame mf = new MurphFrame(this, blockTable, crossingTable);
        mf.setVisible(true);
    }//GEN-LAST:event_murphButtonActionPerformed

    private void occupancyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_occupancyCheckBoxActionPerformed
        if (TrackModel.doTablesExist()) {
            populateTables();
        }
    }//GEN-LAST:event_occupancyCheckBoxActionPerformed

    private void initializeDatabase() {
        dbHelper.connect();
        dbHelper.execute("DROP TABLE IF EXISTS BLOCKS");
        dbHelper.execute("DROP TABLE IF EXISTS CONNECTIONS");
        dbHelper.execute("DROP TABLE IF EXISTS CROSSINGS");
        dbHelper.execute("DROP TABLE IF EXISTS STATIONS");

        dbHelper.execute("CREATE TABLE BLOCKS (\n"
                + " line text NOT NULL,\n"
                + " section varchar(1) NOT NULL,\n"
                + " block integer,\n"
                + " length float,\n"
                + " curvature float,\n"
                + " grade float,\n"
                + " speed_limit integer,\n"
                + " underground boolean,\n"
                + " power boolean,\n"
                + " occupied boolean,\n"
                + " heater boolean,\n"
                + " message varchar(128),\n"
                + " x float,\n"
                + " y float,\n"
                + " track_controller integer,\n"
                + " tc_orientation,\n"
                + " PRIMARY KEY (line, block)\n"
                + ");");
        dbHelper.execute("CREATE TABLE CONNECTIONS (\n"
                + " line text NOT NULL,\n"
                + " section varchar(1) NOT NULL,\n"
                + " block integer,\n"
                + " prev_block integer,\n"
                + " prev_valid integer,\n"
                + " next_block integer,\n"
                + " next_valid integer,\n"
                + " switch_block integer,\n"
                + " switch_valid integer,\n"
                + " current_setting integer,\n"
                + " PRIMARY KEY (line, block)\n"
                + ");");
        dbHelper.execute("CREATE TABLE CROSSINGS (\n"
                + " line text NOT NULL,\n"
                + " block integer,\n"
                + " signal boolean,\n"
                + " PRIMARY KEY (line, block)\n"
                + ");");
        dbHelper.execute("CREATE TABLE STATIONS (\n"
                + " line text NOT NULL,\n"
                + " section varchar(1) NOT NULL,\n"
                + " block integer,\n"
                + " name text,\n"
                + " passengers integer,\n"
                + " message varchar(128),\n"
                + " PRIMARY KEY (line, block)\n"
                + ");");
        dbHelper.close();
    }

    public void populateDatabase(File trackDataFile) {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(trackDataFile)));

            Class.forName("org.sqlite.JDBC");
            Connection conn = DriverManager.getConnection("jdbc:sqlite:test.db");
            conn.setAutoCommit(false);
            PreparedStatement blockStmt = conn.prepareStatement("INSERT INTO BLOCKS VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
            PreparedStatement connStmt = conn.prepareStatement("INSERT INTO CONNECTIONS VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
            PreparedStatement crossingStmt = conn.prepareStatement("INSERT INTO CROSSINGS VALUES(?, ?, ?);");
            PreparedStatement stationStmt = conn.prepareStatement("INSERT INTO STATIONS VALUES(?, ?, ?, ?, ?, ?);");

            String line;
            while ((line = br.readLine()) != null) {
                if (line.contains("%") || line.contains("Red")) {
                    continue;
                }
                List<String> items = Arrays.asList(line.split(","));
                blockStmt.setString(1, items.get(0));
                blockStmt.setString(2, items.get(1));
                blockStmt.setInt(3, Integer.parseInt(items.get(2)));
                blockStmt.setFloat(4, Float.parseFloat(items.get(3)));
                blockStmt.setFloat(5, Float.parseFloat(items.get(4)));
                blockStmt.setFloat(6, Float.parseFloat(items.get(5)));
                blockStmt.setInt(7, Integer.parseInt(items.get(6)));
                blockStmt.setBoolean(8, line.contains("UNDERGROUND"));
                blockStmt.setBoolean(9, true);
                blockStmt.setBoolean(10, false);
                blockStmt.setBoolean(11, false);
                blockStmt.setString(12, "");
                blockStmt.setFloat(13, Float.parseFloat(items.get(10)));
                blockStmt.setFloat(14, Float.parseFloat(items.get(11)));
                blockStmt.setInt(15, Integer.parseInt(items.get(18)));
                blockStmt.setInt(16, Integer.parseInt(items.get(19)));
                blockStmt.addBatch();

                connStmt.setString(1, items.get(0));
                connStmt.setString(2, items.get(1));
                connStmt.setInt(3, Integer.parseInt(items.get(2)));
                connStmt.setInt(4, Integer.parseInt(items.get(12)));
                connStmt.setInt(5, Integer.parseInt(items.get(13)));
                connStmt.setInt(6, Integer.parseInt(items.get(14)));
                connStmt.setInt(7, Integer.parseInt(items.get(15)));
                if (line.contains("SWITCH")) {
                    connStmt.setInt(8, Integer.parseInt(items.get(16)));
                    connStmt.setInt(9, Integer.parseInt(items.get(17)));
                    connStmt.setInt(10, Integer.parseInt(items.get(16)));
                } else {
                    connStmt.setNull(8, java.sql.Types.INTEGER);
                    connStmt.setNull(9, java.sql.Types.INTEGER);
                    connStmt.setNull(10, java.sql.Types.INTEGER);
                }
                connStmt.addBatch();

                if (line.contains("CROSSING")) {
                    crossingStmt.setString(1, items.get(0));
                    crossingStmt.setInt(2, Integer.parseInt(items.get(2)));
                    crossingStmt.setBoolean(3, false);
                    crossingStmt.addBatch();
                }
                if (line.contains("STATION")) {
                    List<String> swag = Arrays.asList(items.get(7).split(";"));
                    stationStmt.setString(1, items.get(0));
                    stationStmt.setString(2, items.get(1));
                    stationStmt.setInt(3, Integer.parseInt(items.get(2)));
                    stationStmt.setString(4, swag.size() > 1 ? swag.get(1).trim() : "");
                    stationStmt.setInt(5, 0);
                    stationStmt.setString(6, "");
                    stationStmt.addBatch();
                }
            }
            blockStmt.executeBatch();
            connStmt.executeBatch();
            crossingStmt.executeBatch();
            stationStmt.executeBatch();
            conn.setAutoCommit(true);
            conn.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(TrackModelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    protected void populateTables() {

        TrackModelTableModel blockTableModel = TrackModelTableModel.getBlockTableModel();
        TrackModelTableModel switchTableModel = TrackModelTableModel.getSwitchTableModel();
        TrackModelTableModel crossingTableModel = TrackModelTableModel.getCrossingTableModel();
        TrackModelTableModel stationTableModel = TrackModelTableModel.getStationTableModel();

        blockTable.setModel(blockTableModel);
        switchTable.setModel(switchTableModel);
        crossingTable.setModel(crossingTableModel);
        stationTable.setModel(stationTableModel);

        try {
            dbHelper.connect();

            ResultSet rs = occupancyCheckBox.isSelected()
                    ? dbHelper.query("SELECT * FROM BLOCKS WHERE OCCUPIED")
                    : dbHelper.query("SELECT * FROM BLOCKS");
            while (rs.next()) {
                Object rowData[] = {
                    rs.getString(1),
                    rs.getString(2),
                    rs.getInt(3),
                    rs.getDouble(4) * TrackBlock.METER_TO_YARD_MULTIPLIER,
                    rs.getDouble(5),
                    rs.getDouble(6),
                    rs.getInt(7) * TrackBlock.KILOMETER_TO_MILE_MULTIPLIER,
                    rs.getBoolean(8) ? "UNDERGROUND" : "",
                    rs.getBoolean(9) ? "POWER" : "OUTAGE",
                    rs.getBoolean(10) ? "OCCUPIED" : "",
                    rs.getBoolean(11) ? "ON" : "OFF",
                    rs.getString(12)
                };
                blockTableModel.addRow(rowData);
            }

            rs = dbHelper.query("SELECT * FROM CONNECTIONS WHERE SWITCH_BLOCK;");
            while (rs.next()) {
                Object rowData2[] = {
                    rs.getString(1),
                    rs.getString(2),
                    rs.getInt(3),
                    rs.getInt(4),
                    rs.getInt(5),
                    rs.getInt(6),
                    rs.getInt(7),
                    rs.getInt(8) == -1 ? "YARD" : rs.getInt(8),
                    rs.getInt(9),
                    rs.getInt(10) == -1 ? "YARD" : rs.getInt(10)
                };
                switchTableModel.addRow(rowData2);
            }

            rs = dbHelper.query("SELECT * FROM CROSSINGS NATURAL JOIN BLOCKS;");
            while (rs.next()) {
                Object rowData[] = {
                    rs.getString(1),
                    rs.getString(4),
                    rs.getInt(2),
                    rs.getDouble(5),
                    rs.getBoolean(11) ? "OCCUPIED" : "",
                    rs.getBoolean(3) ? "ON" : "OFF"
                };
                crossingTableModel.addRow(rowData);
            }

            rs = dbHelper.query("SELECT * FROM STATIONS;");
            while (rs.next()) {
                Object rowData[] = {
                    rs.getString(1),
                    rs.getString(2),
                    rs.getInt(3),
                    rs.getString(4),
                    rs.getInt(5)
                };
                stationTableModel.addRow(rowData);
            }

            rs.close();
            dbHelper.close();
        } catch (SQLException ex) {
            Logger.getLogger(TrackModelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane blockScrollPane;
    public javax.swing.JTable blockTable;
    private javax.swing.JButton clearButton;
    private javax.swing.JScrollPane crossingScrollPane;
    public javax.swing.JTable crossingTable;
    private javax.swing.JButton importButton;
    private javax.swing.JButton murphButton;
    private javax.swing.JCheckBox occupancyCheckBox;
    private javax.swing.JScrollPane stationScrollPane;
    public javax.swing.JTable stationTable;
    private javax.swing.JScrollPane switchScrollPane;
    public javax.swing.JTable switchTable;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
